snippet Pom Jarvis SDK:
  prefix: "01-pom-jarvis-sdk-dep"
  scope: "xml"
  name: "Pom Jarvis SDK"
  body: |
    <dependency>
      <groupId>fr.wilda.jarvis.sdk</groupId>
      <artifactId>jarvis-sdk</artifactId>
      <version>1.0.0</version>
    </dependency>

snippet Pom rest client:
  prefix: "02-pom-rest-dep"
  scope: "xml"
  name: "Pom rest client"
  body: |
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-client-jackson</artifactId>
    </dependency>

snippet Props OVHcloud env:
  prefix: "03-props-ovh-env"
  name: "Props OVHcloud env"
  body: |
   # OVHcloud parameter
   ovhcloud.consumer=\${OVH_CONSUMER_KEY}
   ovhcloud.application=\${OVH_APPLICATION_KEY}
   ovhcloud.projectId=\${OVH_CLOUD_PROJECT_SERVICE}

snippet Props RestClient:
  prefix: "04-props-rest-client"
  name: "Props RestClient"
  body: |
   # RestClient parameter
   quarkus.rest-client."fr.wilda.picocli.sdk.OVHcloudAPIService".url=https://eu.api.ovh.com/
   quarkus.rest-client."fr.wilda.picocli.sdk.OVHcloudAPIService".scope=javax.inject.Singleton 

snippet OVHcloud API Service:
  prefix: "05-OVHcloudAPIService-annot"
  name: "OVHcloud API Service"
  scope: "java"
  body: |
    @Path("/v1")
    @RegisterRestClient
    @ClientHeaderParam(name = "X-Ovh-Consumer", value = "\${ovhcloud.consumer}")
    @ClientHeaderParam(name = "X-Ovh-Application", value = "\${ovhcloud.application}")
    @ClientHeaderParam(name = "Content-Type", value = "application/json")

snippet OVHcloud API Service Endpoints:
  prefix: "06-OVHcloudAPIService-endpoints"
  name: "OVHcloud API Service Endpoints"
  scope: "java"
  body: |
    @GET
    @Path("/me")
    OVHcloudUser getMe(@HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

    @GET
    @Path("/cloud/project/{projectId}/kube")
    String[] getKubernetes(@PathParam("projectId") String projectId,
        @HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

    @GET
    @Path("/cloud/project")
    String[] getProjects(
        @HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

    @GET
    @Path("/cloud/project/{projectId}/kube/{kubeId}")
    OVHcloudKube getKubernete(@PathParam("projectId") String projectId, @PathParam("kubeId") String kubeId,
        @HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

snippet JarvisCommand Class Annotation:
  prefix: "07-jarvis-cli-class-annot"
  scope: "java"
  name: "JarvisCommand Class Annotation"
  body: |
    @Command(name = "jarvis", mixinStandardHelpOptions = true)

snippet JarvisCommand logger:
  prefix: "08-jarvis-cli-logger"
  scope: "java"
  name: "JarvisCommand logger"
  body: |
    // Logger
    private static final Logger _LOG = LoggerFactory.getLogger(JarvisCommand.class);

snippet JarvisCommand param name:
  prefix: "08-jarvis-cli-name-param"
  scope: "java"
  name: "JarvisCommand param name"
  body: |
    @Parameters(paramLabel = "<name>", defaultValue = "picocli", description = "Your name.")
    String name;

snippet OVHCommand Class Annotation:
  prefix: "09-ovh-cli-class-annot"
  scope: "java"
  name: "OVHCommand Class Annotation"
  body: |
    @Command(name = "ovhcloud", mixinStandardHelpOptions = true)

snippet OVHCommand logger:
  prefix: "10-ovh-cli-logger"
  scope: "java"
  name: "OVHCommand logger"
  body: |
    // Logger
    private static final Logger _LOG = LoggerFactory.getLogger(OVHcloudSubCommand.class);

snippet OVHCommand rest client:
  prefix: "11-ovh-cli-rest-client"
  scope: "java"
  name: "OVHCommand rest client"
  body: |
    // Service to call the OVHcloud REST API
    @RestClient
    OVHcloudAPIService apiService;

snippet OVHCommand OVH Stuff:
  prefix: "12-ovh-cli-ovh-stuff"
  scope: "java"
  name: "OVHCommand OVH Stuff"
  body: |
    // OVHcloud public cloud project ID injected by environment variables in the
    // application.properties file
    @ConfigProperty(name = "ovhcloud.projectId")
    String projectId;

    // Timestamp to add to each OVHcloud API call
    private Long ovhTimestamp;

snippet OVHCommand options:
  prefix: "13-ovh-cli-options"
  scope: "java"
  name: "OVHCommand options"
  body: |
    // Option to activate the /me OVHcloud REST API
    @Option(names = {"-m", "--me"}, description = "Display the OVHcloud account details.")
    private boolean me;

    @Option(names = {"-k", "--kube"}, description = "Display your Managed Kubernetes Service created.")
    private boolean kube;

snippet OVHCommand me:
  prefix: "14-ovh-cli-me"
  scope: "java"
  name: "OVHCommand me"
  body: |
    ovhTimestamp = System.currentTimeMillis() / 1000;
    if (me) {
      _LOG.info("Me:\n{}", apiService.getMe(OVHcloudSignatureHelper.signature("me", ovhTimestamp),
          Long.toString(ovhTimestamp)));
    }

snippet OVHCommand kube:
  prefix: "15-ovh-cli-kube"
  scope: "java"
  name: "OVHCommand kube"
  body: |
    if (kube) {
      String[] kubes = apiService.getKubernetes(projectId,
          OVHcloudSignatureHelper.signature("cloud/project/" + projectId + "/kube", ovhTimestamp),
          Long.toString(ovhTimestamp));
      _LOG.info("\nNumber of Kubernetes clusters: {}", kubes.length);

      for (String kubeId : kubes) {
        _LOG.info("\n{}",
            apiService.getKubernete(
                projectId, kubeId, OVHcloudSignatureHelper
                    .signature("cloud/project/" + projectId + "/kube/" + kubeId, ovhTimestamp),
                Long.toString(ovhTimestamp)));
      }
    }

snippet Props logs prod:
  prefix: "16-props-logs-prod"
  name: "Props logs prod"
  body: |
    # Make outputs readable
    %prod.quarkus.log.level=OFF
    %prod.quarkus.banner.enabled=false
    %prod.quarkus.log.category."fr.wilda".level=INFO
    %prod.quarkus.log.console.format=%m

snippet Jarvis bash:
  prefix: "17-jarvis-bash"
  scope: "shellscript"
  name: "Jarvis bash"
  body: |
    #!/bin/bash

    java -jar ../../../target/quarkus-app/quarkus-run.jar \$1 \$2 \$3

snippet Pom Quarkus LangChain4j:
  prefix: "18-pom-langchain4j-dep"
  scope: "xml"
  name: "Pom Quarkus LangChain4j"
  body: |
    <dependency>
          <groupId>io.quarkiverse.langchain4j</groupId>
          <artifactId>quarkus-langchain4j-mistral-ai</artifactId>
          <version>0.15.1</version>
    </dependency> 

snippet Props Langchain4J:
  prefix: "19-props-langchain4J"
  name: "Props Langchain4J"
  body: |
    # Langchain4J parameters
    quarkus.langchain4j.mistralai.api-key=\${OVH_AI_ENDPOINTS_ACCESS_TOKEN}
    quarkus.langchain4j.mistralai.chat-model.max-tokens=1500
    quarkus.langchain4j.mistralai.chat-model.model-name=Mixtral-8x22B-Instruct-v0.1

    quarkus.langchain4j.mistralai.log-requests=true
    quarkus.langchain4j.mistralai.log-responses=true

snippet OVHcloud Mistral Service askQuestion:
  prefix: "20-OVHcloudMistral-ask-method"
  name: "OVHcloud Mistral Service askQuestion"
  scope: "java"
  body: |
    @SystemMessage("You are Jarvis, an AI assistant.")
    @UserMessage("Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.")
    Multi<String> askAQuestion(String question);

snippet JarvisCommand AI question param:
  prefix: "21-jarvis-cli-question-param"
  scope: "java"
  name: "JarvisCommand AI question param"
  body: |
    // Question to ask
    @Parameters(paramLabel = "<question>", defaultValue = "What is the answer to life, the universe and everything?", description = "The question to ask to Jarvis.")
    private String question;

snippet JarvisCommand AI Service:
  prefix: "22-jarvis-cli-ai-svc"
  scope: "java"
  name: "JarvisCommand AI Service"
  body: |
    // Service to call Mistral LLM
    @Inject
    AIEndpointService aiEndpointMistral7bService; 

snippet JarvisCommand AI Service call:
  prefix: "23-jarvis-cli-ai-svc-call"
  scope: "java"
  name: "JarvisCommand AI Service call"
  body: |
    _LOG.info("\nðŸ¤–:\n");
    aiEndpointMistral7bService.askAQuestion(question)
    .subscribe()
    .asStream()
    .forEach(token -> {
      try {
        TimeUnit.MILLISECONDS.sleep(150);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
      _LOG.info(token);
    });
    _LOG.info("\n");