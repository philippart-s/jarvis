##########################################################################################################
###                                                   API SDK
##########################################################################################################
snippet OVHcloud User:
  prefix: "OVHcloudUser-fields"
  name: "OVHcloud User"
  scope: "java"
  body: |
    private String firstname;
    private String name;
    private String city;
    private String country;
    private String language;

snippet OVHcloud Kube:
  prefix: "OVHcloudKube-fields"
  name: "OVHcloud Kube"
  scope: "java"
  body: |
    private String id;
    private String isUpToDate;
    private String name;
    private String region;
    private String status;
    private String updatePolicy;
    private String updatedAt;
    private String version;

snippet OVHcloud Signature Helper:
  prefix: "OVHcloudSigHelper"
  name: "OVHcloud Signature Helper"
  scope: "java"
  body: |
    public static String signature(String endPoint, Long timestamp) {
        // build signature
        String toSign = new StringBuilder(System.getenv("OVH_APPLICATION_SECRET"))
                .append("+")
                .append(System.getenv("OVH_CONSUMER_KEY"))
                .append("+")
                .append("GET")
                .append("+")
                .append("https://eu.api.ovh.com/v1/" + endPoint)
                .append("+")
                .append("")
                .append("+")
                .append(timestamp)
                .toString();
        try {
            return new StringBuilder("\$1\$").append(hashSHA1(toSign)).toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

    private static String hashSHA1(String text)
            throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        sha1hash = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < sha1hash.length; i++) {
            sb.append(Integer.toString((sha1hash[i] & 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }

snippet OVHcloud API Service:
  prefix: "OVHcloudAPI-annot"
  name: "OVHcloud API Service"
  scope: "java"
  body: |
    @Path("/v1")
    @RegisterRestClient
    @ClientHeaderParam(name = "X-Ovh-Consumer", value = "\${ovhcloud.consumer}")
    @ClientHeaderParam(name = "X-Ovh-Application", value = "\${ovhcloud.application}")
    @ClientHeaderParam(name = "Content-Type", value = "application/json")

snippet OVHcloud API Service Endpoints:
  prefix: "OVHcloudAPI-endpoints"
  name: "OVHcloud API Service Endpoints"
  scope: "java"
  body: |
    @GET
    @Path("/me")
    OVHcloudUser getMe(@HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

    @GET
    @Path("/cloud/project/{projectId}/kube")
    String[] getKubernetes(@PathParam("projectId") String projectId,
        @HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

    @GET
    @Path("/cloud/project")
    String[] getProjects(
        @HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);

    @GET
    @Path("/cloud/project/{projectId}/kube/{kubeId}")
    OVHcloudKube getKubernete(@PathParam("projectId") String projectId, @PathParam("kubeId") String kubeId,
        @HeaderParam("X-Ovh-Signature") String signature,
        @HeaderParam("X-Ovh-Timestamp") String ovhTimestamp);



##########################################################################################################
###                                        AIEndpointMistral7bService
##########################################################################################################

snippet OVHcloud Mistral Service askQuestion:
  prefix: "OVHcloudMistral-ask-method"
  name: "OVHcloud Mistral Service askQuestion"
  scope: "java"
  body: |
    @SystemMessage("You are Jarvis, an AI assistant.")
      @UserMessage("Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.")
        String askAQuestion(String question);
 

##########################################################################################################
###                                        application.properties
##########################################################################################################
snippet Props OVHcloud env:
  prefix: "props-ovh-env"
  name: "Props OVHcloud env"
  body: |
   # OVHcloud parameter
   ovhcloud.consumer=\${OVH_CONSUMER_KEY}
   ovhcloud.application=\${OVH_APPLICATION_KEY}
   ovhcloud.projectId=\${OVH_CLOUD_PROJECT_SERVICE}

snippet Props RestClient:
  prefix: "props-rest-client"
  name: "Props RestClient"
  body: |
   # RestClient parameter
   quarkus.rest-client."fr.wilda.picocli.sdk.OVHcloudAPIService".url=https://eu.api.ovh.com/
   quarkus.rest-client."fr.wilda.picocli.sdk.OVHcloudAPIService".scope=javax.inject.Singleton 

snippet Props Langchain4J:
  prefix: "props-langchain4J"
  name: "Props Langchain4J"
  body: |
    # Langchain4J parameters
    quarkus.langchain4j.mistralai.api-key=foo
    quarkus.langchain4j.mistralai.chat-model.max-tokens=150
    quarkus.langchain4j.mistralai.chat-model.model-name=Mistral-7B-Instruct-v0.2

    quarkus.langchain4j.mistralai.log-requests=true
    quarkus.langchain4j.mistralai.log-responses=true

snippet Props logs prod:
  prefix: "props-logs-prod"
  name: "Props logs prod"
  body: |
    # Make outputs readable
    %prod.quarkus.log.level=OFF
    %prod.quarkus.banner.enabled=false
    %prod.quarkus.log.category."fr.wilda".level=INFO
    %prod.quarkus.log.console.format=%m

##########################################################################################################
###                                        JarvisCommand.java
##########################################################################################################
snippet JarvisCommand Class Annotation:
  prefix: "jarvis-cmd-class-annot"
  scope: "java"
  name: "JarvisCommand Class Annotation"
  body: |
    @Command(name = "jarvis", mixinStandardHelpOptions = true)


snippet JarvisCommand param name:
  prefix: "jarvis-cmd-name-param"
  scope: "java"
  name: "JarvisCommand param name"
  body: |
    @Parameters(paramLabel = "<name>", defaultValue = "picocli", description = "Your name.")
    String name;

snippet JarvisCommand logger:
  prefix: "jarvis-cmd-logger"
  scope: "java"
  name: "JarvisCommand logger"
  body: |
    // Logger
    private static final Logger _LOG = LoggerFactory.getLogger(JarvisCommand.class);

snippet JarvisCommand AI Service:
  prefix: "jarvis-cmd-ai-svc"
  scope: "java"
  name: "JarvisCommand AI Service"
  body: |
    // Service to call Mistral LLM
    @Inject
    AIEndpointMistral7bService aiEndpointMistral7bService; 

snippet JarvisCommand AI question param:
  prefix: "jarvis-cmd-question-param"
  scope: "java"
  name: "JarvisCommand AI question param"
  body: |
    // Question to ask
    @Parameters(paramLabel = "<question>", defaultValue = "What is the answer to life, the universe and everything?", description = "The question to ask to Jarvis.")
    private String question;

##########################################################################################################
###                                        OVHcloudSubCommand.java
##########################################################################################################
snippet OVHCommand Class Annotation:
  prefix: "ovh-cmd-class-annot"
  scope: "java"
  name: "OVHCommand Class Annotation"
  body: |
    @Command(name = "ovhcloud", mixinStandardHelpOptions = true)

snippet OVHCommand logger:
  prefix: "ovh-cmd-logger"
  scope: "java"
  name: "OVHCommand logger"
  body: |
    // Logger
    private static final Logger _LOG = LoggerFactory.getLogger(OVHcloudSubCommand.class);

snippet OVHCommand options:
  prefix: "ovh-cmd-options"
  scope: "java"
  name: "OVHCommand options"
  body: |
    // Option to activate the /me OVHcloud REST API
    @Option(names = {"-m", "--me"}, description = "Display the OVHcloud account details.")
    private boolean me;

    @Option(names = {"-k", "--kube"}, description = "Display your Managed Kubernetes Service created.")
    private boolean kube;

snippet OVHCommand rest client:
  prefix: "ovh-cmd-rest-client"
  scope: "java"
  name: "OVHCommand rest client"
  body: |
    // Service to call the OVHcloud REST API
    @RestClient
    OVHcloudAPIService apiService;

snippet OVHCommand OVH Stuff:
  prefix: "ovh-cmd-ovh-stuff"
  scope: "java"
  name: "OVHCommand OVH Stuff"
  body: |
    // OVHcloud public cloud project ID injected by environment variables in the
    // application.properties file
    @ConfigProperty(name = "ovhcloud.projectId")
    String projectId;

    // Timestamp to add to each OVHcloud API call
    private Long ovhTimestamp;

snippet OVHCommand me:
  prefix: "ovh-cmd-me"
  scope: "java"
  name: "OVHCommand me"
  body: |
    ovhTimestamp = System.currentTimeMillis() / 1000;
    if (me) {
      _LOG.info("Me:\n{}", apiService.getMe(OVHcloudSignatureHelper.signature("me", ovhTimestamp),
          Long.toString(ovhTimestamp)));
    }

snippet OVHCommand kube:
  prefix: "ovh-cmd-kube"
  scope: "java"
  name: "OVHCommand kube"
  body: |
    if (kube) {
      String[] kubes = apiService.getKubernetes(projectId,
          OVHcloudSignatureHelper.signature("cloud/project/" + projectId + "/kube", ovhTimestamp),
          Long.toString(ovhTimestamp));
      _LOG.info("\nNumber of Kubernetes clusters: {}", kubes.length);

      for (String kubeId : kubes) {
        _LOG.info("\n{}",
            apiService.getKubernete(
                projectId, kubeId, OVHcloudSignatureHelper
                    .signature("cloud/project/" + projectId + "/kube/" + kubeId, ovhTimestamp),
                Long.toString(ovhTimestamp)));
      }
    }    

##########################################################################################################
###                                               jarvis.sh
##########################################################################################################
snippet Jarvis bash:
  prefix: "jarvis-bash"
  scope: "shellscript"
  name: "Jarvis bash"
  body: |
    #!/bin/bash

    java -jar ../../../target/quarkus-app/quarkus-run.jar \$1 \$2 \$3

##########################################################################################################
###                                               pom.xml
##########################################################################################################
snippet Pom rest client:
  prefix: "pom-rest-dep"
  scope: "xml"
  name: "Pom rest client"
  body: |
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-client-jackson</artifactId>
    </dependency>

snippet Pom Quarkus LangChain4j:
  prefix: "pom-langchain4j-dep"
  scope: "xml"
  name: "Pom Quarkus LangChain4j"
  body: |
    <dependency>
          <groupId>io.quarkiverse.langchain4j</groupId>
          <artifactId>quarkus-langchain4j-mistral-ai</artifactId>
          <version>0.10.3</version>
    </dependency> 