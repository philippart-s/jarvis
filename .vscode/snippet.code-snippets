{
  "AIEndpointService annotations": {
    "body": [
      "@ApplicationScoped",
      "@RegisterAiService",
      ""
    ],
    "description": "",
    "prefix": "28-AIEndpointService-annotation",
    "scope": "java"
  },
  "AISentimentService": {
    "body": [
      "@Path(\"/api\")",
      "@RegisterRestClient(baseUri = \"https://roberta-base-go-emotions.endpoints.kepler.ai.cloud.ovh.net\")",
      "@ClientHeaderParam(name = \"Authorization\", value = \"Bearer \\${ovhcloud.ai-endpoints.token}\")",
      "@ClientHeaderParam(name = \"Content-Type\", value = \"application/json\")",
      ""
    ],
    "description": "",
    "prefix": "35-sentiment-service",
    "scope": "java"
  },
  "AISentimentService text2emotion method": {
    "body": [
      "@POST",
      "@Path(\"text2emotions\")",
      "EmotionEvaluation text2emotions(String text);",
      ""
    ],
    "description": "",
    "prefix": "36-text2emotion-method",
    "scope": "java"
  },
  "Add AISentimentService client": {
    "body": [
      "@RestClient",
      "AISentimentService aiSentimentService;",
      ""
    ],
    "description": "",
    "prefix": "37-sentiment-client",
    "scope": "java"
  },
  "Add file option": {
    "body": [
      "@Option(names = {\"-f\", \"--file\"}, description = \"File to analyse (sentiment analysis)\")",
      "private File fileToAnalyse;",
      ""
    ],
    "description": "",
    "prefix": "41-file-option",
    "scope": "java"
  },
  "Add file output": {
    "body": [
      "if (fileToAnalyse != null) {",
      "  SortedMap\u003cString, Double\u003e res =",
      "      EmotionEvaluation.toSortedMap(",
      "          aiSentimentService.text2emotions(Files.readString(fileToAnalyse.toPath())));",
      "",
      "  _LOG.debug(\"First: {}\", res.firstEntry());",
      "  _LOG.info(\"Sentiment: {}\", EmotionEvaluation.toEmoji(res.firstEntry().getKey()));",
      "}"
    ],
    "description": "",
    "prefix": "42-file-ouput",
    "scope": "java"
  },
  "Add sentiment option": {
    "body": [
      "@Option(names = {\"-s\", \"--sentiment\"}, paramLabel = \"\u003cSENTIMENT\u003e\", description = \"Analyze a sentiment with the OVHcloud Text to Sentiment API.\")",
      "private String sentimentToAnalyze;",
      ""
    ],
    "description": "",
    "prefix": "38-sentiment-option",
    "scope": "java"
  },
  "Add sentiment output": {
    "body": [
      "if (sentimentToAnalyze != null) {",
      "  _LOG.debug(\"param {}\", sentimentToAnalyze);",
      "  SortedMap\u003cString, Double\u003e res =",
      "      EmotionEvaluation.toSortedMap(aiSentimentService.text2emotions(sentimentToAnalyze));",
      "",
      "  _LOG.debug(\"First: {}\", res.firstEntry());",
      "  _LOG.info(\"Sentiment: {}\", EmotionEvaluation.toEmoji(res.firstEntry().getKey()));",
      "}",
      ""
    ],
    "description": "",
    "prefix": "39-sentiment-output",
    "scope": "java"
  },
  "Add token for sentiment service": {
    "body": [
      "# AI Endpoints parameters",
      "ovhcloud.ai-endpoints.token=\\${OVH_AI_ENDPOINTS_ACCESS_TOKEN}",
      ""
    ],
    "description": "",
    "prefix": "34-token-sentiment-service",
    "scope": ""
  },
  "Jarvis bash": {
    "body": [
      "#!/bin/bash",
      "",
      "java -jar ../../../target/quarkus-app/quarkus-run.jar \\$1 \\$2 \\$3",
      ""
    ],
    "description": "",
    "prefix": "23-jarvis-bash",
    "scope": "shellscript"
  },
  "JarvisCommand": {
    "body": [
      "_LOG.info(\"ðŸ‘‹ {}\", name);",
      ""
    ],
    "description": "",
    "prefix": "12-jarvis-hello",
    "scope": "java"
  },
  "JarvisCommand AI Service": {
    "body": [
      "// Service to call Mistral LLM",
      "@Inject",
      "AIEndpointService aiEndpointMistral7bService; ",
      ""
    ],
    "description": "",
    "prefix": "31-jarvis-cli-ai-svc",
    "scope": "java"
  },
  "JarvisCommand AI Service call": {
    "body": [
      "_LOG.info(\"\\nðŸ¤–:\\n\");",
      "aiEndpointMistral7bService.askAQuestion(question)",
      ".subscribe()",
      ".asStream()",
      ".forEach(token -\u003e {",
      "  try {",
      "    TimeUnit.MILLISECONDS.sleep(150);",
      "  } catch (InterruptedException e) {",
      "    e.printStackTrace();",
      "  }",
      "  _LOG.info(token);",
      "});",
      "_LOG.info(\"\\n\");",
      ""
    ],
    "description": "",
    "prefix": "32-jarvis-cli-ai-svc-call",
    "scope": "java"
  },
  "JarvisCommand AI question param": {
    "body": [
      "// Question to ask",
      "@Parameters(paramLabel = \"\u003cquestion\u003e\", defaultValue = \"What is the answer to life, the universe and everything?\", description = \"The question to ask to Jarvis.\")",
      "private String question;",
      ""
    ],
    "description": "",
    "prefix": "30-jarvis-cli-question-param",
    "scope": "java"
  },
  "JarvisCommand Class Annotation": {
    "body": [
      "@Command(name = \"jarvis\", mixinStandardHelpOptions = true)",
      ""
    ],
    "description": "",
    "prefix": "09-jarvis-cli-class-annot",
    "scope": "java"
  },
  "JarvisCommand logger": {
    "body": [
      "// Logger",
      "private static final Logger _LOG = LoggerFactory.getLogger(JarvisCommand.class);",
      ""
    ],
    "description": "",
    "prefix": "10-jarvis-cli-logger",
    "scope": "java"
  },
  "JarvisCommand param name": {
    "body": [
      "@Parameters(paramLabel = \"\u003cname\u003e\", defaultValue = \"picocli\", description = \"Your name.\")",
      "String name;",
      ""
    ],
    "description": "",
    "prefix": "11-jarvis-cli-name-param",
    "scope": "java"
  },
  "OVHCommand Class Annotation": {
    "body": [
      "@Command(name = \"ovhcloud\", mixinStandardHelpOptions = true)",
      ""
    ],
    "description": "",
    "prefix": "13-ovh-cli-class-annot",
    "scope": "java"
  },
  "OVHCommand OVH Stuff": {
    "body": [
      "// OVHcloud public cloud project ID injected by environment variables in the",
      "// application.properties file",
      "@ConfigProperty(name = \"ovhcloud.projectId\")",
      "String projectId;",
      "",
      "// Timestamp to add to each OVHcloud API call",
      "private Long ovhTimestamp;",
      ""
    ],
    "description": "",
    "prefix": "16-ovh-cli-ovh-stuff",
    "scope": "java"
  },
  "OVHCommand kube": {
    "body": [
      "if (kube) {",
      "  String[] kubes = apiService.getKubernetes(projectId,",
      "      OVHcloudSignatureHelper.signature(\"cloud/project/\" + projectId + \"/kube\", ovhTimestamp),",
      "      Long.toString(ovhTimestamp));",
      "  _LOG.info(\"\\nNumber of Kubernetes clusters: {}\", kubes.length);",
      "",
      "  for (String kubeId : kubes) {",
      "    _LOG.info(\"\\n{}\",",
      "        apiService.getKubernete(",
      "            projectId, kubeId, OVHcloudSignatureHelper",
      "                .signature(\"cloud/project/\" + projectId + \"/kube/\" + kubeId, ovhTimestamp),",
      "            Long.toString(ovhTimestamp)));",
      "  }",
      "}",
      ""
    ],
    "description": "",
    "prefix": "19-ovh-cli-kube",
    "scope": "java"
  },
  "OVHCommand logger": {
    "body": [
      "// Logger",
      "private static final Logger _LOG = LoggerFactory.getLogger(OVHcloudSubCommand.class);",
      ""
    ],
    "description": "",
    "prefix": "14-ovh-cli-logger",
    "scope": "java"
  },
  "OVHCommand me": {
    "body": [
      "ovhTimestamp = System.currentTimeMillis() / 1000;",
      "if (me) {",
      "  _LOG.info(\"Me:\\n{}\", apiService.getMe(OVHcloudSignatureHelper.signature(\"me\", ovhTimestamp),",
      "      Long.toString(ovhTimestamp)));",
      "}",
      ""
    ],
    "description": "",
    "prefix": "18-ovh-cli-me",
    "scope": "java"
  },
  "OVHCommand options": {
    "body": [
      "// Option to activate the /me OVHcloud REST API",
      "@Option(names = {\"-m\", \"--me\"}, description = \"Display the OVHcloud account details.\")",
      "private boolean me;",
      "",
      "@Option(names = {\"-k\", \"--kube\"}, description = \"Display your Managed Kubernetes Service created.\")",
      "private boolean kube;",
      ""
    ],
    "description": "",
    "prefix": "17-ovh-cli-options",
    "scope": "java"
  },
  "OVHCommand rest client": {
    "body": [
      "// Service to call the OVHcloud REST API",
      "@RestClient",
      "OVHcloudAPIService apiService;",
      ""
    ],
    "description": "",
    "prefix": "15-ovh-cli-rest-client",
    "scope": "java"
  },
  "OVHcloud API Service": {
    "body": [
      "@Path(\"/v1\")",
      "@RegisterRestClient",
      "@ClientHeaderParam(name = \"X-Ovh-Consumer\", value = \"\\${ovhcloud.consumer}\")",
      "@ClientHeaderParam(name = \"X-Ovh-Application\", value = \"\\${ovhcloud.application}\")",
      "@ClientHeaderParam(name = \"Content-Type\", value = \"application/json\")",
      ""
    ],
    "description": "",
    "prefix": "07-OVHcloudAPIService-annot",
    "scope": "java"
  },
  "OVHcloud API Service Endpoints": {
    "body": [
      "@GET",
      "@Path(\"/me\")",
      "OVHcloudUser getMe(@HeaderParam(\"X-Ovh-Signature\") String signature,",
      "    @HeaderParam(\"X-Ovh-Timestamp\") String ovhTimestamp);",
      "",
      "@GET",
      "@Path(\"/cloud/project/{projectId}/kube\")",
      "String[] getKubernetes(@PathParam(\"projectId\") String projectId,",
      "    @HeaderParam(\"X-Ovh-Signature\") String signature,",
      "    @HeaderParam(\"X-Ovh-Timestamp\") String ovhTimestamp);",
      "",
      "@GET",
      "@Path(\"/cloud/project\")",
      "String[] getProjects(",
      "    @HeaderParam(\"X-Ovh-Signature\") String signature,",
      "    @HeaderParam(\"X-Ovh-Timestamp\") String ovhTimestamp);",
      "",
      "@GET",
      "@Path(\"/cloud/project/{projectId}/kube/{kubeId}\")",
      "OVHcloudKube getKubernete(@PathParam(\"projectId\") String projectId, @PathParam(\"kubeId\") String kubeId,",
      "    @HeaderParam(\"X-Ovh-Signature\") String signature,",
      "    @HeaderParam(\"X-Ovh-Timestamp\") String ovhTimestamp);",
      ""
    ],
    "description": "",
    "prefix": "08-OVHcloudAPIService-endpoints",
    "scope": "java"
  },
  "OVHcloud Mistral Service askQuestion": {
    "body": [
      "@SystemMessage(\"You are Jarvis, an AI assistant.\")",
      "@UserMessage(\"Answer as best possible to the following question: {question}. The answer must be in a style of a virtual assistant.\")",
      "Multi\u003cString\u003e askAQuestion(String question);",
      ""
    ],
    "description": "",
    "prefix": "29-OVHcloudMistral-ask-method",
    "scope": "java"
  },
  "Pom Jarvis SDK": {
    "body": [
      "\u003cdependency\u003e",
      "  \u003cgroupId\u003efr.wilda.jarvis.sdk\u003c/groupId\u003e",
      "  \u003cartifactId\u003ejarvis-sdk\u003c/artifactId\u003e",
      "  \u003cversion\u003e1.1.0\u003c/version\u003e",
      "\u003c/dependency\u003e",
      ""
    ],
    "description": "",
    "prefix": "04-pom-jarvis-sdk-dep",
    "scope": "xml"
  },
  "Props Langchain4J": {
    "body": [
      "# Langchain4J parameters",
      "quarkus.langchain4j.mistralai.base-url=\\${OVH_AI_ENDPOINTS_MODEL_URL}",
      "quarkus.langchain4j.mistralai.api-key=\\${OVH_AI_ENDPOINTS_ACCESS_TOKEN}",
      "quarkus.langchain4j.mistralai.chat-model.max-tokens=512",
      "quarkus.langchain4j.mistralai.chat-model.model-name=\\${OVH_AI_ENDPOINTS_MODEL_NAME}",
      "",
      "quarkus.langchain4j.mistralai.log-requests=false",
      "quarkus.langchain4j.mistralai.log-responses=false",
      ""
    ],
    "description": "",
    "prefix": "27-props-langchain4J",
    "scope": ""
  },
  "Props OVHcloud env": {
    "body": [
      "# OVHcloud parameter",
      "ovhcloud.consumer=\\${OVH_CONSUMER_KEY}",
      "ovhcloud.application=\\${OVH_APPLICATION_KEY}",
      "ovhcloud.projectId=\\${OVH_CLOUD_PROJECT_SERVICE}",
      ""
    ],
    "description": "",
    "prefix": "05-props-ovh-env",
    "scope": ""
  },
  "Props RestClient": {
    "body": [
      "# RestClient parameter",
      "quarkus.rest-client.\"fr.wilda.picocli.sdk.OVHcloudAPIService\".url=https://eu.api.ovh.com/",
      "quarkus.rest-client.\"fr.wilda.picocli.sdk.OVHcloudAPIService\".scope=javax.inject.Singleton ",
      ""
    ],
    "description": "",
    "prefix": "06-props-rest-client",
    "scope": ""
  },
  "Props logs prod": {
    "body": [
      "# Make outputs readable",
      "%prod.quarkus.log.level=OFF",
      "%prod.quarkus.banner.enabled=false",
      "%prod.quarkus.log.category.\"fr.wilda\".level=INFO",
      "%prod.quarkus.log.console.format=%m",
      ""
    ],
    "description": "",
    "prefix": "20-props-logs-prod",
    "scope": ""
  }
}