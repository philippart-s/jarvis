package fr.wilda.picocli;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import fr.wilda.picocli.sdk.OVHcloudAPIService;
import fr.wilda.picocli.sdk.OVHcloudSignatureHelper;
import picocli.CommandLine.Command;
import picocli.CommandLine.Parameters;

@Command(name = "greeting", mixinStandardHelpOptions = true)
public class GreetingCommand implements Runnable {
    private static final Logger _LOG = LoggerFactory.getLogger(GreetingCommand.class);
    private Long ovhTimestamp;

    @Parameters(paramLabel = "<name>", defaultValue = "picocli", description = "Your name.")
    String name;

    @ConfigProperty(name = "ovhcloud.projectId")
    String projectId;

    @RestClient
    OVHcloudAPIService apiService;

    @Override
    public void run() {
        ovhTimestamp = System.currentTimeMillis() / 1000;
        _LOG.info("Hello, what can I do for you?");
        _LOG.info("Me:\n{}", apiService.getMe(OVHcloudSignatureHelper.signature("me", ovhTimestamp),
                Long.toString(ovhTimestamp)));
        _LOG.debug("My project:\n {}", projectId);
        String[] kubes = apiService.getKubernetes(projectId,
                OVHcloudSignatureHelper.signature("cloud/project/" + projectId + "/kube",
                        ovhTimestamp),
                Long.toString(ovhTimestamp));
        _LOG.info("\nNumber of Kubernetes clusters: {}", kubes.length);

        for (String kubeId : kubes) {
            _LOG.info("\n{}", apiService.getKubernete(projectId, kubeId,
                    OVHcloudSignatureHelper.signature("cloud/project/" + projectId + "/kube/"
                            + kubeId, ovhTimestamp),
                    Long.toString(ovhTimestamp)));
        }
    }
}
